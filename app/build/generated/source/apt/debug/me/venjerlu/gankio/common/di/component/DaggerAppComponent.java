// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package me.venjerlu.gankio.common.di.component;

import android.content.Context;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import me.venjerlu.gankio.common.di.module.AppModule;
import me.venjerlu.gankio.common.di.module.AppModule_ProvideContextFactory;
import me.venjerlu.gankio.common.http.GankApi;
import me.venjerlu.gankio.common.http.RetrofitModule;
import me.venjerlu.gankio.common.http.RetrofitModule_ProvideGankApiFactory;
import me.venjerlu.gankio.common.http.RetrofitModule_ProvideOkHttpClientFactory;
import okhttp3.OkHttpClient;

public final class DaggerAppComponent implements AppComponent {
  private Provider<Context> provideContextProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<GankApi> provideGankApiProvider;

  private DaggerAppComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideContextProvider =
        DoubleCheck.provider(AppModule_ProvideContextFactory.create(builder.appModule));

    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            RetrofitModule_ProvideOkHttpClientFactory.create(builder.retrofitModule));

    this.provideGankApiProvider =
        DoubleCheck.provider(
            RetrofitModule_ProvideGankApiFactory.create(
                builder.retrofitModule, provideOkHttpClientProvider));
  }

  @Override
  public Context getContext() {
    return provideContextProvider.get();
  }

  @Override
  public GankApi getGankApi() {
    return provideGankApiProvider.get();
  }

  public static final class Builder {
    private AppModule appModule;

    private RetrofitModule retrofitModule;

    private Builder() {}

    public AppComponent build() {
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      if (retrofitModule == null) {
        throw new IllegalStateException(RetrofitModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder retrofitModule(RetrofitModule retrofitModule) {
      this.retrofitModule = Preconditions.checkNotNull(retrofitModule);
      return this;
    }
  }
}
