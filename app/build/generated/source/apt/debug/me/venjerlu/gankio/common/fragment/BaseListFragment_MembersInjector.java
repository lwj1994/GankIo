// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package me.venjerlu.gankio.common.fragment;

import dagger.MembersInjector;
import javax.inject.Provider;
import me.venjerlu.gankio.common.mvp.IBasePresenter;
import me.venjerlu.gankio.widget.pulltorefresh.BaseListAdapter;

public final class BaseListFragment_MembersInjector<
        T extends IBasePresenter, D extends BaseListAdapter>
    implements MembersInjector<BaseListFragment<T, D>> {
  private final Provider<T> mPresenterProvider;

  private final Provider<D> mAdapterProvider;

  public BaseListFragment_MembersInjector(
      Provider<T> mPresenterProvider, Provider<D> mAdapterProvider) {
    assert mPresenterProvider != null;
    this.mPresenterProvider = mPresenterProvider;
    assert mAdapterProvider != null;
    this.mAdapterProvider = mAdapterProvider;
  }

  public static <T extends IBasePresenter, D extends BaseListAdapter>
      MembersInjector<BaseListFragment<T, D>> create(
          Provider<T> mPresenterProvider, Provider<D> mAdapterProvider) {
    return new BaseListFragment_MembersInjector<T, D>(mPresenterProvider, mAdapterProvider);
  }

  @Override
  public void injectMembers(BaseListFragment<T, D> instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.mPresenter = mPresenterProvider.get();
    instance.mAdapter = mAdapterProvider.get();
  }

  public static <T extends IBasePresenter, D extends BaseListAdapter> void injectMPresenter(
      BaseListFragment<T, D> instance, Provider<T> mPresenterProvider) {
    instance.mPresenter = mPresenterProvider.get();
  }

  public static <T extends IBasePresenter, D extends BaseListAdapter> void injectMAdapter(
      BaseListFragment<T, D> instance, Provider<D> mAdapterProvider) {
    instance.mAdapter = mAdapterProvider.get();
  }
}
